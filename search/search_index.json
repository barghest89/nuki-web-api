{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nuki Web API Python Client","text":"<p>A Python client for the Nuki Web API, providing convenient access to smartlock management, accounts, and related features.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Full client for the Nuki Web API</li> <li>Pythonic classes for Smartlock, Account, ApiKey, etc.</li> <li>Async-friendly (compatible with httpx or aiohttp)</li> <li>Typed for better IDE support</li> <li>Integrated with mkdocstrings for auto-generated docs</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install nukiwebapi\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from nukiwebapi import NukiWebAPI\n\nclient = NukiWebAPI(\"YOUR_ACCESS_TOKEN\")\n\nfor lock_id, lock in client.lock_instances:\n    print(lock.name)\n    print(lock.hex_id)\n\n    print(lock.is_locked)\n    print(lock.battery_charge)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>API Reference</p>"},{"location":"#development","title":"Development","text":"<p>Clone the repository and install in editable mode:</p> <pre><code>git clone https://github.com/barghest89/nuki-web-api.git\ncd nuki-web-api\npip install -e \".[dev]\"\n</code></pre> <p>Run tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT license.</p>"},{"location":"reference/account/","title":"Account","text":"<p>Get account details.</p> <p>GET /account</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Account representation from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def get(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get account details.\n\n    GET /account\n\n    Returns:\n        Dict[str, Any]: Account representation from the API.\n    \"\"\"\n    return self.client._request(\"GET\", \"/account\").json()\n</code></pre> <p>Update account details.</p> <p>POST /account</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>The language code (required).</p> required <code>email</code> <code>str</code> <p>The new email address.</p> <code>None</code> <code>password</code> <code>str</code> <p>The account password (min 7 chars).</p> <code>None</code> <code>name</code> <code>str</code> <p>The account name.</p> <code>None</code> <code>config</code> <code>dict</code> <p>Alexa/Google/OTP configuration.</p> <code>None</code> <code>profile</code> <code>dict</code> <p>Profile details (firstName, lastName, address, etc.).</p> <code>None</code> <code>delete_api_tokens</code> <code>bool</code> <p>Whether to delete existing API tokens if password changes. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Updated account representation from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def update(\n    self,\n    language: str,\n    email: Optional[str] = None,\n    password: Optional[str] = None,\n    name: Optional[str] = None,\n    config: Optional[Dict[str, Any]] = None,\n    profile: Optional[Dict[str, Any]] = None,\n    delete_api_tokens: bool = True,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update account details.\n\n    POST /account\n\n    Args:\n        language (str): The language code (required).\n        email (str, optional): The new email address.\n        password (str, optional): The account password (min 7 chars).\n        name (str, optional): The account name.\n        config (dict, optional): Alexa/Google/OTP configuration.\n        profile (dict, optional): Profile details (firstName, lastName, address, etc.).\n        delete_api_tokens (bool, optional): Whether to delete existing API tokens if password changes. Defaults to True.\n\n    Returns:\n        Dict[str, Any]: Updated account representation from the API.\n    \"\"\"\n    body: Dict[str, Any] = {\"language\": language}\n    if email is not None:\n        body[\"email\"] = email\n    if password is not None:\n        if len(password) &lt; 7:\n            raise ValueError(\"Password must be at least 7 characters long\")\n        body[\"password\"] = password\n    if name is not None:\n        body[\"name\"] = name\n    if config is not None:\n        body[\"config\"] = config\n    if profile is not None:\n        body[\"profile\"] = profile\n\n    return self.client._request(\n        \"POST\",\n        \"/account\",\n        params={\"deleteApiTokens\": delete_api_tokens},\n        json=body,\n    )\n</code></pre> <p>Delete the account.</p> <p>DELETE /account</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response confirming account deletion.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def delete(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete the account.\n\n    DELETE /account\n\n    Returns:\n        Dict[str, Any]: API response confirming account deletion.\n    \"\"\"\n    return self.client._request(\"DELETE\", \"/account\")\n</code></pre> <p>Trigger an email change request for the account.</p> <p>POST /account/email/change</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The new email address to change to.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating the email change request was sent.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def change_email(self, email: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Trigger an email change request for the account.\n\n    POST /account/email/change\n\n    Args:\n        email (str): The new email address to change to.\n\n    Returns:\n        Dict[str, Any]: API response indicating the email change request was sent.\n    \"\"\"\n    data = {\"email\": email}\n    return self.client._request(\"POST\", \"/account/email/change\", json=data)\n</code></pre> <p>Verify the email change using the code sent to the new email.</p> <p>POST /account/email/verify</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating success or failure of the email verification.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def verify_email(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Verify the email change using the code sent to the new email.\n\n    POST /account/email/verify\n\n    Returns:\n        Dict[str, Any]: API response indicating success or failure of the email verification.\n    \"\"\"\n    return self.client._request(\"POST\", \"/account/email/verify\")\n</code></pre> <p>List all integrations for the account.</p> <p>GET /account/integration</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: List of integrations for this account.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def list_integrations(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    List all integrations for the account.\n\n    GET /account/integration\n\n    Returns:\n        Dict[str, Any]: List of integrations for this account.\n    \"\"\"\n    return self.client._request(\"GET\", \"/account/integration\").json()\n</code></pre> <p>Delete a specific integration or its tokens for the account.</p> <p>DELETE /account/integration</p> <p>Parameters:</p> Name Type Description Default <code>apiKeyId</code> <code>str</code> <p>ID of the API key to delete.</p> required <code>tokenId</code> <code>str</code> <p>Specific token ID to delete. If not provided, all tokens under the API key will be removed.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating success of the deletion.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def delete_integration(self, apiKeyId: str, tokenId: Optional[str] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a specific integration or its tokens for the account.\n\n    DELETE /account/integration\n\n    Args:\n        apiKeyId (str): ID of the API key to delete.\n        tokenId (str, optional): Specific token ID to delete. If not provided, all tokens under the API key will be removed.\n\n    Returns:\n        Dict[str, Any]: API response indicating success of the deletion.\n    \"\"\"\n    data = {\"apiKeyId\": apiKeyId}\n    if tokenId:\n        data[\"tokenId\"] = tokenId\n    return self.client._request(\"DELETE\", \"/account/integration\", json=data)\n</code></pre> <p>Create a one-time password (OTP) secret for the account.</p> <p>PUT /account/otp</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The OTP secret (Base32) to be used for generating TOTP codes.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def create_otp(self) -&gt; str:\n    \"\"\"\n    Create a one-time password (OTP) secret for the account.\n\n    PUT /account/otp\n\n    Returns:\n        str: The OTP secret (Base32) to be used for generating TOTP codes.\n    \"\"\"\n    return self.client._request(\"PUT\", \"/account/otp\").json()\n</code></pre> <p>Enable OTP for the account using a TOTP code generated from the secret.</p> <p>POST /account/otp</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>str</code> <p>Time-based one-time password (TOTP) code generated from the OTP secret.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating success of enabling OTP.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def enable_otp(self, otp: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Enable OTP for the account using a TOTP code generated from the secret.\n\n    POST /account/otp\n\n    Args:\n        otp (str): Time-based one-time password (TOTP) code generated from the OTP secret.\n\n    Returns:\n        Dict[str, Any]: API response indicating success of enabling OTP.\n    \"\"\"\n    return self.client._request(\"POST\", \"/account/otp\", json={\"otp\": otp})\n</code></pre> <p>Disable OTP for the account.</p> <p>DELETE /account/otp</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating OTP was successfully disabled.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def disable_otp(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Disable OTP for the account.\n\n    DELETE /account/otp\n\n    Returns:\n        Dict[str, Any]: API response indicating OTP was successfully disabled.\n    \"\"\"\n    return self.client._request(\"DELETE\", \"/account/otp\")\n</code></pre> <p>Reset the account password and optionally delete existing API tokens.</p> <p>POST /account/password/reset</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email of the account to reset the password for.</p> required <code>deleteApiTokens</code> <code>bool</code> <p>Whether to delete existing API tokens. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response indicating success of the password reset.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def reset_password(self, email: str, deleteApiTokens: bool = True) -&gt; Dict[str, Any]:\n    \"\"\"\n    Reset the account password and optionally delete existing API tokens.\n\n    POST /account/password/reset\n\n    Args:\n        email (str): The email of the account to reset the password for.\n        deleteApiTokens (bool, optional): Whether to delete existing API tokens. Defaults to True.\n\n    Returns:\n        Dict[str, Any]: API response indicating success of the password reset.\n    \"\"\"\n    data = {\"email\": email, \"deleteApiTokens\": deleteApiTokens}\n    return self.client._request(\"POST\", \"/account/password/reset\", json=data)\n</code></pre> <p>Get account settings.</p> <p>GET /account/setting</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Account settings from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def get_setting(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get account settings.\n\n    GET /account/setting\n\n    Returns:\n        Dict[str, Any]: Account settings from the API.\n    \"\"\"\n    return self.client._request(\"GET\", \"/account/setting\").json()\n</code></pre> <p>Update account settings.</p> <p>PUT /account/setting</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Settings data to update.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Updated account settings from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def update_setting(self, data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update account settings.\n\n    PUT /account/setting\n\n    Args:\n        data (dict): Settings data to update.\n\n    Returns:\n        Dict[str, Any]: Updated account settings from the API.\n    \"\"\"\n    return self.client._request(\"PUT\", \"/account/setting\", json=data).json()\n</code></pre> <p>Delete a specific account setting.</p> <p>DELETE /account/setting</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response confirming deletion.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def delete_setting(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a specific account setting.\n\n    DELETE /account/setting\n\n    Returns:\n        Dict[str, Any]: API response confirming deletion.\n    \"\"\"\n    return self.client._request(\"DELETE\", \"/account/setting\")\n</code></pre> <p>List all sub-accounts, optionally filtered by email.</p> <p>GET /account/sub</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Regex to filter sub-account emails.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: List of sub-account representations.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def list_sub_accounts(self, email: str = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    List all sub-accounts, optionally filtered by email.\n\n    GET /account/sub\n\n    Args:\n        email (str, optional): Regex to filter sub-account emails.\n\n    Returns:\n        Dict[str, Any]: List of sub-account representations.\n    \"\"\"\n    params = {}\n    if email:\n        params[\"email\"] = email\n    return self.client._request(\"GET\", \"/account/sub\", params=params).json()\n</code></pre> <p>Create a new sub-account.</p> <p>PUT /account/sub</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Sub-account email address.</p> required <code>password</code> <code>str</code> <p>Sub-account password (min 7 characters).</p> required <code>name</code> <code>str</code> <p>Name of the sub-account.</p> required <code>rights</code> <code>int</code> <p>Rights bitmask (0\u201331).</p> required <code>language</code> <code>str</code> <p>Language code (e.g., \"de\").</p> required <code>profile</code> <code>dict</code> <p>Sub-account profile with keys: - firstName (str) - lastName (str) - address (str) - zip (str) - city (str) - country (str, 2-letter ISO code)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Created sub-account representation from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def create_sub_account(\n    self,\n    email: str,\n    password: str,\n    name: str,\n    rights: int,\n    language: str,\n    profile: Dict[str, str]\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new sub-account.\n\n    PUT /account/sub\n\n    Args:\n        email (str): Sub-account email address.\n        password (str): Sub-account password (min 7 characters).\n        name (str): Name of the sub-account.\n        rights (int): Rights bitmask (0\u201331).\n        language (str): Language code (e.g., \"de\").\n        profile (dict): Sub-account profile with keys:\n            - firstName (str)\n            - lastName (str)\n            - address (str)\n            - zip (str)\n            - city (str)\n            - country (str, 2-letter ISO code)\n\n    Returns:\n        Dict[str, Any]: Created sub-account representation from the API.\n    \"\"\"\n    payload = {\n        \"email\": email,\n        \"password\": password,\n        \"name\": name,\n        \"rights\": rights,\n        \"language\": language,\n        \"profile\": profile\n    }\n    return self.client._request(\"PUT\", \"/account/sub\", json=payload).json()\n</code></pre> <p>Get details of a specific sub-account.</p> <p>GET /account/sub/{accountId}</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>ID of the sub-account to retrieve.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Sub-account representation from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def get_sub_account(self, account_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get details of a specific sub-account.\n\n    GET /account/sub/{accountId}\n\n    Args:\n        account_id (int): ID of the sub-account to retrieve.\n\n    Returns:\n        Dict[str, Any]: Sub-account representation from the API.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/account/sub/{account_id}\").json()\n</code></pre> <p>Update a specific sub-account.</p> <p>POST /account/sub/{accountId}</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>ID of the sub-account to update.</p> required <code>data</code> <code>dict</code> <p>Fields to update (email, password, name, rights, language, profile, etc.)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Updated sub-account representation from the API.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def update_sub_account(self, account_id: int, data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a specific sub-account.\n\n    POST /account/sub/{accountId}\n\n    Args:\n        account_id (int): ID of the sub-account to update.\n        data (dict): Fields to update (email, password, name, rights, language, profile, etc.)\n\n    Returns:\n        Dict[str, Any]: Updated sub-account representation from the API.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/account/sub/{account_id}\", json=data)\n</code></pre> <p>Delete a specific sub-account.</p> <p>DELETE /account/sub/{accountId}</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>ID of the sub-account to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response confirming deletion.</p> Source code in <code>nukiwebapi/account.py</code> <pre><code>def delete_sub_account(self, account_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a specific sub-account.\n\n    DELETE /account/sub/{accountId}\n\n    Args:\n        account_id (int): ID of the sub-account to delete.\n\n    Returns:\n        Dict[str, Any]: API response confirming deletion.\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/account/sub/{account_id}\")\n</code></pre>"},{"location":"reference/accountuser/","title":"AccountUser","text":"<p>List all account users.</p> <p>GET /account/user</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: List of account users.</p> Source code in <code>nukiwebapi/account_user.py</code> <pre><code>def list_account_users(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    List all account users.\n\n    GET /account/user\n\n    Returns:\n        Dict[str, Any]: List of account users.\n    \"\"\"\n    return self.client._request(\"GET\", \"/account/user\").json()\n</code></pre> <p>Create a new account user.</p> <p>PUT /account/user</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email of the user (mandatory).</p> required <code>name</code> <code>str</code> <p>Name of the user (mandatory).</p> required <code>type</code> <code>int</code> <p>User type, 0 = user, 1 = company.</p> <code>None</code> <code>language</code> <code>str</code> <p>Language code. Allowed: [\"en\", \"de\", \"es\", \"fr\", \"it\", \"nl\", \"cs\", \"sk\"]</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Created account user representation.</p> Source code in <code>nukiwebapi/account_user.py</code> <pre><code>def create_account_user(\n    self,\n    email: str,\n    name: str,\n    type: Optional[int] = None,\n    language: Optional[str] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new account user.\n\n    PUT /account/user\n\n    Args:\n        email (str): Email of the user (mandatory).\n        name (str): Name of the user (mandatory).\n        type (int, optional): User type, 0 = user, 1 = company.\n        language (str, optional): Language code. Allowed: [\"en\", \"de\", \"es\", \"fr\", \"it\", \"nl\", \"cs\", \"sk\"]\n\n    Returns:\n        Dict[str, Any]: Created account user representation.\n    \"\"\"\n    payload = {\"email\": email, \"name\": name}\n\n    if type is not None:\n        if type not in (0, 1):\n            raise ValueError(\"type must be 0 (user) or 1 (company)\")\n        payload[\"type\"] = str(type)\n\n    if language is not None:\n        if language not in self.ALLOWED_LANGUAGES:\n            raise ValueError(f\"language must be one of {self.ALLOWED_LANGUAGES}\")\n        payload[\"language\"] = language\n\n    return self.client._request(\"PUT\", \"/account/user\", json=payload).json()\n</code></pre> <p>Get details of a specific account user.</p> <p>GET /account/user/{accountUserId}</p> <p>Parameters:</p> Name Type Description Default <code>account_user_id</code> <code>int</code> <p>ID of the account user to retrieve.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Account user representation.</p> Source code in <code>nukiwebapi/account_user.py</code> <pre><code>def get_account_user(self, account_user_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get details of a specific account user.\n\n    GET /account/user/{accountUserId}\n\n    Args:\n        account_user_id (int): ID of the account user to retrieve.\n\n    Returns:\n        Dict[str, Any]: Account user representation.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/account/user/{account_user_id}\").json()\n</code></pre> <p>Update details of a specific account user.</p> <p>POST /account/user/{accountUserId}</p> <p>Parameters:</p> Name Type Description Default <code>account_user_id</code> <code>int</code> <p>ID of the account user to update.</p> required <code>email</code> <code>str</code> <p>New email (mandatory).</p> required <code>name</code> <code>str</code> <p>New name (mandatory).</p> required <code>language</code> <code>str</code> <p>Language code (mandatory). Allowed: [\"en\", \"de\", \"es\", \"fr\", \"it\", \"nl\", \"cs\", \"sk\"]</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Updated account user representation.</p> Source code in <code>nukiwebapi/account_user.py</code> <pre><code>def update_account_user(\n    self,\n    account_user_id: int,\n    email: str,\n    name: str,\n    language: str\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update details of a specific account user.\n\n    POST /account/user/{accountUserId}\n\n    Args:\n        account_user_id (int): ID of the account user to update.\n        email (str): New email (mandatory).\n        name (str): New name (mandatory).\n        language (str): Language code (mandatory). Allowed: [\"en\", \"de\", \"es\", \"fr\", \"it\", \"nl\", \"cs\", \"sk\"]\n\n    Returns:\n        Dict[str, Any]: Updated account user representation.\n    \"\"\"\n    if language not in self.ALLOWED_LANGUAGES:\n        raise ValueError(f\"language must be one of {self.ALLOWED_LANGUAGES}\")\n\n    payload = {\n        \"email\": email,\n        \"name\": name,\n        \"language\": language\n    }\n\n    return self.client._request(\"POST\", f\"/account/user/{account_user_id}\", json=payload).json()\n</code></pre> <p>Delete a specific account user asynchronously.</p> <p>DELETE /account/user/{accountUserId}</p> <p>Parameters:</p> Name Type Description Default <code>account_user_id</code> <code>int</code> <p>ID of the account user to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: API response confirming deletion.</p> Source code in <code>nukiwebapi/account_user.py</code> <pre><code>def delete_account_user(self, account_user_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a specific account user asynchronously.\n\n    DELETE /account/user/{accountUserId}\n\n    Args:\n        account_user_id (int): ID of the account user to delete.\n\n    Returns:\n        Dict[str, Any]: API response confirming deletion.\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/account/user/{account_user_id}\")\n</code></pre>"},{"location":"reference/address/","title":"Address","text":"<p>List all addresses.</p> <p>GET /address</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of address representations.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def list_addresses(self) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    List all addresses.\n\n    GET /address\n\n    Returns:\n        List of address representations.\n    \"\"\"\n    return self.client._request(\"GET\", \"/address\").json()\n</code></pre> <p>Create a new address.</p> <p>PUT /address</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the address (mandatory).</p> required <code>smartlock_ids</code> <code>List[int]</code> <p>List of smartlock IDs (mandatory).</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created address representation.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def create_address(self, name: str, smartlock_ids: List[int]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new address.\n\n    PUT /address\n\n    Args:\n        name (str): Name of the address (mandatory).\n        smartlock_ids (List[int]): List of smartlock IDs (mandatory).\n\n    Returns:\n        Created address representation.\n    \"\"\"\n    if not name:\n        raise ValueError(\"name is required\")\n    if not smartlock_ids or not all(isinstance(s, int) for s in smartlock_ids):\n        raise ValueError(\"smartlock_ids must be a non-empty list of integers\")\n\n    payload = {\"name\": name, \"smartlockIds\": smartlock_ids}\n    return self.client._request(\"PUT\", \"/address\", json=payload).json()\n</code></pre> <p>Update an existing address.</p> <p>POST /address/{addressId}</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID (mandatory).</p> required <code>name</code> <code>str</code> <p>New name for the address.</p> <code>None</code> <code>smartlock_ids</code> <code>List[int]</code> <p>Updated list of smartlock IDs.</p> <code>None</code> <code>settings</code> <code>dict</code> <p>Address settings.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated address representation.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def update_address(\n    self,\n    address_id: int,\n    name: Optional[str] = None,\n    smartlock_ids: Optional[List[int]] = None,\n    settings: Optional[Dict[str, Any]] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update an existing address.\n\n    POST /address/{addressId}\n\n    Args:\n        address_id (int): Address ID (mandatory).\n        name (str, optional): New name for the address.\n        smartlock_ids (List[int], optional): Updated list of smartlock IDs.\n        settings (dict, optional): Address settings.\n\n    Returns:\n        Updated address representation.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n\n    payload: Dict[str, Any] = {}\n    if name is not None:\n        payload[\"name\"] = name\n    if smartlock_ids is not None:\n        if not all(isinstance(s, int) for s in smartlock_ids):\n            raise ValueError(\"smartlock_ids must be a list of integers\")\n        payload[\"smartlockIds\"] = smartlock_ids\n    if settings is not None:\n        if not isinstance(settings, dict):\n            raise ValueError(\"settings must be a dict\")\n        payload[\"settings\"] = settings\n\n    return self.client._request(\"POST\", f\"/address/{address_id}\", json=payload).json()\n</code></pre> <p>Delete an existing address.</p> <p>DELETE /address/{addressId}</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def delete_address(self, address_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an existing address.\n\n    DELETE /address/{addressId}\n\n    Args:\n        address_id (int): Address ID to delete.\n\n    Returns:\n        API response.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    return self.client._request(\"DELETE\", f\"/address/{address_id}\").json()\n</code></pre> <p>List all address units for a given address.</p> <p>GET /address/{addressId}/unit</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of address units.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def list_address_units(self, address_id: int) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    List all address units for a given address.\n\n    GET /address/{addressId}/unit\n\n    Args:\n        address_id (int): Address ID.\n\n    Returns:\n        List of address units.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    return self.client._request(\"GET\", f\"/address/{address_id}/unit\").json()\n</code></pre> <p>Create a new unit for a given address.</p> <p>PUT /address/{addressId}/unit</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID.</p> required <code>name</code> <code>str</code> <p>Name of the new unit.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created address unit representation.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def create_address_unit(self, address_id: int, name: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new unit for a given address.\n\n    PUT /address/{addressId}/unit\n\n    Args:\n        address_id (int): Address ID.\n        name (str): Name of the new unit.\n\n    Returns:\n        Created address unit representation.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not name:\n        raise ValueError(\"name is required for creating an address unit\")\n\n    payload = {\"name\": name}\n    return self.client._request(\"PUT\", f\"/address/{address_id}/unit\", json=payload).json()\n</code></pre> <p>Delete multiple units of a given address asynchronously.</p> <p>DELETE /address/{addressId}/unit</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID.</p> required <code>unit_ids</code> <code>List[str]</code> <p>List of unit IDs to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response with request ID and any errors.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def delete_address_units(self, address_id: int, unit_ids: List[str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete multiple units of a given address asynchronously.\n\n    DELETE /address/{addressId}/unit\n\n    Args:\n        address_id (int): Address ID.\n        unit_ids (List[str]): List of unit IDs to delete.\n\n    Returns:\n        API response with request ID and any errors.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not isinstance(unit_ids, list) or not all(isinstance(u, str) for u in unit_ids):\n        raise ValueError(\"unit_ids must be a list of strings\")\n\n    return self.client._request(\"DELETE\", f\"/address/{address_id}/unit\", json=unit_ids).json()\n</code></pre> <p>Delete a specific unit of a given address.</p> <p>DELETE /address/{addressId}/unit/{id}</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID.</p> required <code>unit_id</code> <code>str</code> <p>Unit ID to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response with request ID and any errors.</p> Source code in <code>nukiwebapi/address.py</code> <pre><code>def delete_address_unit(self, address_id: int, unit_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a specific unit of a given address.\n\n    DELETE /address/{addressId}/unit/{id}\n\n    Args:\n        address_id (int): Address ID.\n        unit_id (str): Unit ID to delete.\n\n    Returns:\n        API response with request ID and any errors.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not isinstance(unit_id, str):\n        raise ValueError(\"unit_id must be a string\")\n\n    return self.client._request(\"DELETE\", f\"/address/{address_id}/unit/{unit_id}\").json()\n</code></pre>"},{"location":"reference/addressreservation/","title":"AddressReservation","text":"<p>Get a list of reservations for a specific address.</p> <p>GET /address/{addressId}/reservation</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>ID of the address.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of reservation representations.</p> Source code in <code>nukiwebapi/address_reservation.py</code> <pre><code>def list_reservations(self, address_id: int) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of reservations for a specific address.\n\n    GET /address/{addressId}/reservation\n\n    Args:\n        address_id (int): ID of the address.\n\n    Returns:\n        List of reservation representations.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n\n    return self.client._request(\n        \"GET\", f\"/address/{address_id}/reservation\"\n    ).json()\n</code></pre> <p>Issue authorizations for an address reservation.</p> <p>POST /address/{addressId}/reservation/{id}/issue</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>ID of the address.</p> required <code>reservation_id</code> <code>str</code> <p>Reservation ID to issue authorizations for.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response. 204 No Content if successful.</p> Source code in <code>nukiwebapi/address_reservation.py</code> <pre><code>def issue_reservation(self, address_id: int, reservation_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Issue authorizations for an address reservation.\n\n    POST /address/{addressId}/reservation/{id}/issue\n\n    Args:\n        address_id (int): ID of the address.\n        reservation_id (str): Reservation ID to issue authorizations for.\n\n    Returns:\n        API response. 204 No Content if successful.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not isinstance(reservation_id, str):\n        raise ValueError(\"reservation_id must be a string\")\n\n    return self.client._request(\n        \"POST\", f\"/address/{address_id}/reservation/{reservation_id}/issue\"\n    )\n</code></pre> <p>Revoke authorizations for an address reservation.</p> <p>POST /address/{addressId}/reservation/{id}/revoke</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>ID of the address.</p> required <code>reservation_id</code> <code>str</code> <p>Reservation ID to revoke authorizations for.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response. 204 No Content if successful.</p> Source code in <code>nukiwebapi/address_reservation.py</code> <pre><code>def revoke_reservation(self, address_id: int, reservation_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Revoke authorizations for an address reservation.\n\n    POST /address/{addressId}/reservation/{id}/revoke\n\n    Args:\n        address_id (int): ID of the address.\n        reservation_id (str): Reservation ID to revoke authorizations for.\n\n    Returns:\n        API response. 204 No Content if successful.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not isinstance(reservation_id, str):\n        raise ValueError(\"reservation_id must be a string\")\n\n    return self.client._request(\n        \"POST\", f\"/address/{address_id}/reservation/{reservation_id}/revoke\"\n    )\n</code></pre> <p>Update access times for a reservation.</p> <p>POST /address/{addressId}/reservation/{id}/update/accesstimes</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>ID of the address.</p> required <code>reservation_id</code> <code>str</code> <p>Reservation ID to update.</p> required <code>access_times</code> <code>dict</code> <p>Dictionary with access times. Example: {\"checkInTime\": 0, \"checkOutTime\": 0}</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response. 204 No Content if successful.</p> Source code in <code>nukiwebapi/address_reservation.py</code> <pre><code>def update_reservation_access_times(\n    self, address_id: int, reservation_id: str, access_times: Dict[str, Any]\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update access times for a reservation.\n\n    POST /address/{addressId}/reservation/{id}/update/accesstimes\n\n    Args:\n        address_id (int): ID of the address.\n        reservation_id (str): Reservation ID to update.\n        access_times (dict): Dictionary with access times. Example: {\"checkInTime\": 0, \"checkOutTime\": 0}\n\n    Returns:\n        API response. 204 No Content if successful.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n    if not isinstance(reservation_id, str):\n        raise ValueError(\"reservation_id must be a string\")\n    if not isinstance(access_times, dict):\n        raise ValueError(\"access_times must be a dict\")\n\n    return self.client._request(\n        \"POST\",\n        f\"/address/{address_id}/reservation/{reservation_id}/update/accesstimes\",\n        json=access_times,\n    )\n</code></pre>"},{"location":"reference/addresstoken/","title":"AddressToken","text":"<p>Get info about a specific address token.</p> <p>GET /address/token/{tokenId}</p> <p>Parameters:</p> Name Type Description Default <code>token_id</code> <code>str</code> <p>Token ID.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Token representation as dict.</p> Source code in <code>nukiwebapi/address_token.py</code> <pre><code>def get_token_info(self, token_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get info about a specific address token.\n\n    GET /address/token/{tokenId}\n\n    Args:\n        token_id (str): Token ID.\n\n    Returns:\n        Token representation as dict.\n    \"\"\"\n    if not isinstance(token_id, str):\n        raise ValueError(\"token_id must be a string\")\n\n    return self.client._request(\n        \"GET\", f\"/address/token/{token_id}\"\n    ).json()\n</code></pre> <p>Get info about a redeemed address token.</p> <p>GET /address/token/{tokenId}/redeem</p> <p>Parameters:</p> Name Type Description Default <code>token_id</code> <code>str</code> <p>Token ID.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redeemed token representation as dict.</p> Source code in <code>nukiwebapi/address_token.py</code> <pre><code>def get_redeemed_token(self, token_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get info about a redeemed address token.\n\n    GET /address/token/{tokenId}/redeem\n\n    Args:\n        token_id (str): Token ID.\n\n    Returns:\n        Redeemed token representation as dict.\n    \"\"\"\n    if not isinstance(token_id, str):\n        raise ValueError(\"token_id must be a string\")\n\n    return self.client._request(\n        \"GET\", f\"/address/token/{token_id}/redeem\"\n    ).json()\n</code></pre> <p>Redeem an address token.</p> <p>POST /address/token/{tokenId}/redeem</p> <p>Parameters:</p> Name Type Description Default <code>token_id</code> <code>str</code> <p>Token ID.</p> required <code>email</code> <code>bool</code> <p>Whether to send an email. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response as dict.</p> Source code in <code>nukiwebapi/address_token.py</code> <pre><code>def redeem_token(self, token_id: str, email: bool = True) -&gt; Dict[str, Any]:\n    \"\"\"\n    Redeem an address token.\n\n    POST /address/token/{tokenId}/redeem\n\n    Args:\n        token_id (str): Token ID.\n        email (bool, optional): Whether to send an email. Defaults to True.\n\n    Returns:\n        API response as dict.\n    \"\"\"\n    if not isinstance(token_id, str):\n        raise ValueError(\"token_id must be a string\")\n    if not isinstance(email, bool):\n        raise ValueError(\"email must be a boolean\")\n\n    return self.client._request(\n        \"POST\",\n        f\"/address/token/{token_id}/redeem\",\n        params={\"email\": email},\n        json={}\n    ).json()\n</code></pre> <p>Get a list of tokens for a specific address.</p> <p>GET /address/{addressId}/token</p> <p>Parameters:</p> Name Type Description Default <code>address_id</code> <code>int</code> <p>Address ID.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of token representations.</p> Source code in <code>nukiwebapi/address_token.py</code> <pre><code>def list_tokens(self, address_id: int) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of tokens for a specific address.\n\n    GET /address/{addressId}/token\n\n    Args:\n        address_id (int): Address ID.\n\n    Returns:\n        List of token representations.\n    \"\"\"\n    if not isinstance(address_id, int):\n        raise ValueError(\"address_id must be an integer\")\n\n    return self.client._request(\n        \"GET\", f\"/address/{address_id}/token\"\n    ).json()\n</code></pre>"},{"location":"reference/advancedapi/","title":"AdvancedApi","text":"<p>Get all registered decentral webhooks.</p> <p>GET /api/decentralWebhook</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of webhook objects.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def list_decentral_webhooks(self) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all registered decentral webhooks.\n\n    GET /api/decentralWebhook\n\n    Returns:\n        List of webhook objects.\n    \"\"\"\n    return self.client._request(\"GET\", \"/api/decentralWebhook\").json()\n</code></pre> <p>Create a new decentral webhook.</p> <p>PUT /api/decentralWebhook</p> <p>Parameters:</p> Name Type Description Default <code>webhook_url</code> <code>str</code> <p>The HTTPS URL to receive webhooks.</p> required <code>webhook_features</code> <code>List[str]</code> <p>Features to trigger webhooks. Must be subset of: [\"DEVICE_STATUS\", \"DEVICE_MASTERDATA\", \"DEVICE_CONFIG\",  \"DEVICE_LOGS\", \"DEVICE_AUTHS\", \"ACCOUNT_USER\"]</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def create_decentral_webhook(self, webhook_url: str, webhook_features: List[str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new decentral webhook.\n\n    PUT /api/decentralWebhook\n\n    Args:\n        webhook_url (str): The HTTPS URL to receive webhooks.\n        webhook_features (List[str]): Features to trigger webhooks. Must be subset of:\n            [\"DEVICE_STATUS\", \"DEVICE_MASTERDATA\", \"DEVICE_CONFIG\",\n             \"DEVICE_LOGS\", \"DEVICE_AUTHS\", \"ACCOUNT_USER\"]\n\n    Returns:\n        API response dict.\n    \"\"\"\n    if not webhook_url.startswith(\"https://\"):\n        raise ValueError(\"webhook_url must start with https://\")\n\n    allowed_features = {\n        \"DEVICE_STATUS\", \"DEVICE_MASTERDATA\", \"DEVICE_CONFIG\",\n        \"DEVICE_LOGS\", \"DEVICE_AUTHS\", \"ACCOUNT_USER\"\n    }\n\n    if not isinstance(webhook_features, list) or not all(f in allowed_features for f in webhook_features):\n        raise ValueError(f\"webhook_features must be a list containing only allowed values: {allowed_features}\")\n\n    payload = {\n        \"webhookUrl\": webhook_url,\n        \"webhookFeatures\": list(set(webhook_features))  # ensure uniqueness\n    }\n\n    return self.client._request(\"PUT\", \"/api/decentralWebhook\", json=payload).json()\n</code></pre> <p>Unregister a decentral webhook.</p> <p>DELETE /api/decentralWebhook/{id}</p> <p>Parameters:</p> Name Type Description Default <code>webhook_id</code> <code>int</code> <p>ID of the webhook to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def delete_decentral_webhook(self, webhook_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Unregister a decentral webhook.\n\n    DELETE /api/decentralWebhook/{id}\n\n    Args:\n        webhook_id (int): ID of the webhook to delete.\n\n    Returns:\n        API response dict.\n    \"\"\"\n    if not isinstance(webhook_id, int):\n        raise ValueError(\"webhook_id must be an integer\")\n    return self.client._request(\"DELETE\", f\"/api/decentralWebhook/{webhook_id}\").json()\n</code></pre> <p>Get a list of webhook logs for a given API key (descending order).</p> <p>GET /api/key/{apiKeyId}/webhook/logs</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>API key ID.</p> required <code>id</code> <code>str</code> <p>Filter for older logs.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of logs (max 100, default 50).</p> <code>50</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of webhook logs.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def get_webhook_logs(self, api_key_id: int, id: Optional[str] = None, limit: int = 50) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of webhook logs for a given API key (descending order).\n\n    GET /api/key/{apiKeyId}/webhook/logs\n\n    Args:\n        api_key_id (int): API key ID.\n        id (str, optional): Filter for older logs.\n        limit (int): Maximum number of logs (max 100, default 50).\n\n    Returns:\n        List of webhook logs.\n    \"\"\"\n    if not isinstance(api_key_id, int):\n        raise ValueError(\"api_key_id must be an integer\")\n    if limit &gt; 100 or limit &lt; 1:\n        raise ValueError(\"limit must be between 1 and 100\")\n\n    params: Dict[str, Any] = {\"limit\": limit}\n    if id:\n        params[\"id\"] = id\n\n    return self.client._request(\n        \"GET\",\n        f\"/api/key/{api_key_id}/webhook/logs\",\n        params=params\n    ).json()\n</code></pre> <p>Create asynchronous smartlock authorizations.</p> <p>PUT /smartlock/auth/advanced</p> <p>Parameters:</p> Name Type Description Default <code>auth_data</code> <code>dict</code> <p>Smartlock authorization creation payload.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def create_smartlock_auth_advanced(self, auth_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create asynchronous smartlock authorizations.\n\n    PUT /smartlock/auth/advanced\n\n    Args:\n        auth_data (dict): Smartlock authorization creation payload.\n\n    Returns:\n        API response dict.\n    \"\"\"\n    return self.client._request(\"PUT\", \"/smartlock/auth/advanced\", json=auth_data).json()\n</code></pre> <p>Execute a smartlock action with callback.</p> <p>POST /smartlock/{smartlockId}/action/advanced</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>str</code> <p>Smartlock ID.</p> required <code>action_data</code> <code>dict</code> <p>Smartlock action payload.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def action_smartlock_advanced(self, smartlock_id: str, action_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Execute a smartlock action with callback.\n\n    POST /smartlock/{smartlockId}/action/advanced\n\n    Args:\n        smartlock_id (str): Smartlock ID.\n        action_data (dict): Smartlock action payload.\n\n    Returns:\n        API response dict.\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/smartlock/{smartlock_id}/action/advanced\", json=action_data\n    ).json()\n</code></pre> <p>Lock a smartlock (advanced).</p> <p>POST /smartlock/{smartlockId}/action/lock/advanced</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>str</code> <p>Smartlock ID.</p> required <code>lock_data</code> <code>dict</code> <p>Optional payload.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def lock_smartlock_advanced(self, smartlock_id: str, lock_data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Lock a smartlock (advanced).\n\n    POST /smartlock/{smartlockId}/action/lock/advanced\n\n    Args:\n        smartlock_id (str): Smartlock ID.\n        lock_data (dict, optional): Optional payload.\n\n    Returns:\n        API response dict.\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/smartlock/{smartlock_id}/action/lock/advanced\", json=lock_data or {}\n    ).json()\n</code></pre> <p>Unlock a smartlock (advanced).</p> <p>POST /smartlock/{smartlockId}/action/unlock/advanced</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>str</code> <p>Smartlock ID.</p> required <code>unlock_data</code> <code>dict</code> <p>Optional payload.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response dict.</p> Source code in <code>nukiwebapi/advanced_api.py</code> <pre><code>def unlock_smartlock_advanced(self, smartlock_id: str, unlock_data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Unlock a smartlock (advanced).\n\n    POST /smartlock/{smartlockId}/action/unlock/advanced\n\n    Args:\n        smartlock_id (str): Smartlock ID.\n        unlock_data (dict, optional): Optional payload.\n\n    Returns:\n        API response dict.\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/smartlock/{smartlock_id}/action/unlock/advanced\", json=unlock_data or {}\n    ).json()\n</code></pre>"},{"location":"reference/apikey/","title":"ApiKey","text":"<p>List all API keys.</p> <p>GET /api/key</p> <p>Returns:</p> Type Description <p>list[dict]: List of API key objects.</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def list_api_keys(self):\n    \"\"\"List all API keys.\n\n    GET /api/key\n\n    Returns:\n        list[dict]: List of API key objects.\n    \"\"\"\n    return self.client._request(\"GET\", \"/api/key\")\n</code></pre> <p>Create a new API key.</p> <p>PUT /api/key</p> <p>Parameters:</p> Name Type Description Default <code>key_data</code> <code>dict</code> <p>Data for creating the API key.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Created API key object.</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def create_api_key(self, key_data: dict):\n    \"\"\"Create a new API key.\n\n    PUT /api/key\n\n    Args:\n        key_data (dict): Data for creating the API key.\n\n    Returns:\n        dict: Created API key object.\n    \"\"\"\n    return self.client._request(\"PUT\", \"/api/key\", json=key_data)\n</code></pre> <p>Update an existing API key.</p> <p>POST /api/key/{apiKeyId}</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key to update.</p> required <code>key_data</code> <code>dict</code> <p>Update data.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def update_api_key(self, api_key_id: int, key_data: dict):\n    \"\"\"Update an existing API key.\n\n    POST /api/key/{apiKeyId}\n\n    Args:\n        api_key_id (int): ID of the API key to update.\n        key_data (dict): Update data.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"POST\", f\"/api/key/{api_key_id}\", json=key_data)\n</code></pre> <p>Delete an API key.</p> <p>DELETE /api/key/{apiKeyId}</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key to delete.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def delete_api_key(self, api_key_id: int):\n    \"\"\"Delete an API key.\n\n    DELETE /api/key/{apiKeyId}\n\n    Args:\n        api_key_id (int): ID of the API key to delete.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/api/key/{api_key_id}\")\n</code></pre> <p>Get details of an advanced API key.</p> <p>GET /api/key/{apiKeyId}/advanced</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the advanced API key.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Advanced API key object.</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def get_advanced_api_key(self, api_key_id: int):\n    \"\"\"Get details of an advanced API key.\n\n    GET /api/key/{apiKeyId}/advanced\n\n    Args:\n        api_key_id (int): ID of the advanced API key.\n\n    Returns:\n        dict: Advanced API key object.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/api/key/{api_key_id}/advanced\")\n</code></pre> <p>Create an advanced API key.</p> <p>PUT /api/key/{apiKeyId}/advanced</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the base API key.</p> required <code>key_data</code> <code>dict</code> <p>Data for creating the advanced API key.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def create_advanced_api_key(self, api_key_id: int, key_data: dict):\n    \"\"\"Create an advanced API key.\n\n    PUT /api/key/{apiKeyId}/advanced\n\n    Args:\n        api_key_id (int): ID of the base API key.\n        key_data (dict): Data for creating the advanced API key.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"PUT\", f\"/api/key/{api_key_id}/advanced\", json=key_data)\n</code></pre> <p>Update an advanced API key.</p> <p>POST /api/key/{apiKeyId}/advanced</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the advanced API key.</p> required <code>key_data</code> <code>dict</code> <p>Update data.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def update_advanced_api_key(self, api_key_id: int, key_data: dict):\n    \"\"\"Update an advanced API key.\n\n    POST /api/key/{apiKeyId}/advanced\n\n    Args:\n        api_key_id (int): ID of the advanced API key.\n        key_data (dict): Update data.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"POST\", f\"/api/key/{api_key_id}/advanced\", json=key_data)\n</code></pre> <p>Delete an advanced API key.</p> <p>DELETE /api/key/{apiKeyId}/advanced</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the advanced API key.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def delete_advanced_api_key(self, api_key_id: int):\n    \"\"\"Delete an advanced API key.\n\n    DELETE /api/key/{apiKeyId}/advanced\n\n    Args:\n        api_key_id (int): ID of the advanced API key.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/api/key/{api_key_id}/advanced\")\n</code></pre> <p>Reactivate a deactivated advanced API key.</p> <p>POST /api/key/{apiKeyId}/advanced/reactivate</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the advanced API key.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def reactivate_advanced_api_key(self, api_key_id: int):\n    \"\"\"Reactivate a deactivated advanced API key.\n\n    POST /api/key/{apiKeyId}/advanced/reactivate\n\n    Args:\n        api_key_id (int): ID of the advanced API key.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"POST\", f\"/api/key/{api_key_id}/advanced/reactivate\")\n</code></pre> <p>List all tokens for a given API key.</p> <p>GET /api/key/{apiKeyId}/token</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key.</p> required <p>Returns:</p> Type Description <p>list[dict]: List of API key token objects.</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def list_api_key_tokens(self, api_key_id: int):\n    \"\"\"List all tokens for a given API key.\n\n    GET /api/key/{apiKeyId}/token\n\n    Args:\n        api_key_id (int): ID of the API key.\n\n    Returns:\n        list[dict]: List of API key token objects.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/api/key/{api_key_id}/token\")\n</code></pre> <p>Create a token for a given API key.</p> <p>PUT /api/key/{apiKeyId}/token</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key.</p> required <code>token_data</code> <code>dict</code> <p>Data for the new token.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Created API key token object.</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def create_api_key_token(self, api_key_id: int, token_data: dict):\n    \"\"\"Create a token for a given API key.\n\n    PUT /api/key/{apiKeyId}/token\n\n    Args:\n        api_key_id (int): ID of the API key.\n        token_data (dict): Data for the new token.\n\n    Returns:\n        dict: Created API key token object.\n    \"\"\"\n    return self.client._request(\"PUT\", f\"/api/key/{api_key_id}/token\", json=token_data)\n</code></pre> <p>Update an API key token.</p> <p>POST /api/key/{apiKeyId}/token/{id}</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key.</p> required <code>token_id</code> <code>str</code> <p>ID of the token.</p> required <code>token_data</code> <code>dict</code> <p>Update data.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def update_api_key_token(self, api_key_id: int, token_id: str, token_data: dict):\n    \"\"\"Update an API key token.\n\n    POST /api/key/{apiKeyId}/token/{id}\n\n    Args:\n        api_key_id (int): ID of the API key.\n        token_id (str): ID of the token.\n        token_data (dict): Update data.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"POST\", f\"/api/key/{api_key_id}/token/{token_id}\", json=token_data)\n</code></pre> <p>Delete an API key token.</p> <p>DELETE /api/key/{apiKeyId}/token/{id}</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>int</code> <p>ID of the API key.</p> required <code>token_id</code> <code>str</code> <p>ID of the token.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>API response (usually empty with 204 status).</p> Source code in <code>nukiwebapi/api_key.py</code> <pre><code>def delete_api_key_token(self, api_key_id: int, token_id: str):\n    \"\"\"Delete an API key token.\n\n    DELETE /api/key/{apiKeyId}/token/{id}\n\n    Args:\n        api_key_id (int): ID of the API key.\n        token_id (str): ID of the token.\n\n    Returns:\n        dict: API response (usually empty with 204 status).\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/api/key/{api_key_id}/token/{token_id}\")\n</code></pre>"},{"location":"reference/company/","title":"Company","text":"<p>Get a list of companies.</p> <p>GET /company</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: List of companies, each containing: - name (str) - email (str)</p> Source code in <code>nukiwebapi/company.py</code> <pre><code>def list_companies(self) -&gt; list[dict]:\n    \"\"\"Get a list of companies.\n\n    GET /company\n\n    Returns:\n        list[dict]: List of companies, each containing:\n            - name (str)\n            - email (str)\n    \"\"\"\n    return self.client._request(\"GET\", \"/company\")\n</code></pre>"},{"location":"reference/notification/","title":"Notification","text":"<p>Get all notifications attached to your account.</p> <p>GET /notification</p> <p>Parameters:</p> Name Type Description Default <code>reference_id</code> <code>str</code> <p>Filter by the reference ID to the third-party system.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: List of notification objects containing: - notificationId (str) - referenceId (str) - pushId (str) - secret (str) - os (int) - language (str) - status (int) - lastActiveDate (str) - settings (list[dict])</p> Source code in <code>nukiwebapi/notification.py</code> <pre><code>def list_notifications(self, reference_id: str | None = None) -&gt; list[dict]:\n    \"\"\"Get all notifications attached to your account.\n\n    GET /notification\n\n    Args:\n        reference_id (str, optional): Filter by the reference ID to the third-party system.\n\n    Returns:\n        list[dict]: List of notification objects containing:\n            - notificationId (str)\n            - referenceId (str)\n            - pushId (str)\n            - secret (str)\n            - os (int)\n            - language (str)\n            - status (int)\n            - lastActiveDate (str)\n            - settings (list[dict])\n    \"\"\"\n    params = {\"referenceId\": reference_id} if reference_id else None\n    return self.client._request(\"GET\", \"/notification\", params=params)\n</code></pre> <p>Create a notification configuration.</p> <p>PUT /notification</p> <p>Parameters:</p> Name Type Description Default <code>notification_data</code> <code>dict</code> <p>Notification representation.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Created notification object.</p> Source code in <code>nukiwebapi/notification.py</code> <pre><code>def create_notification(self, notification_data: dict) -&gt; dict:\n    \"\"\"Create a notification configuration.\n\n    PUT /notification\n\n    Args:\n        notification_data (dict): Notification representation.\n\n    Returns:\n        dict: Created notification object.\n    \"\"\"\n    return self.client._request(\"PUT\", \"/notification\", json=notification_data)\n</code></pre> <p>Get a specific notification configuration.</p> <p>GET /notification/{notificationId}</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The unique notification ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Notification object.</p> Source code in <code>nukiwebapi/notification.py</code> <pre><code>def get_notification(self, notification_id: str) -&gt; dict:\n    \"\"\"Get a specific notification configuration.\n\n    GET /notification/{notificationId}\n\n    Args:\n        notification_id (str): The unique notification ID.\n\n    Returns:\n        dict: Notification object.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/notification/{notification_id}\")\n</code></pre> <p>Update a notification configuration.</p> <p>POST /notification/{notificationId}</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The unique notification ID.</p> required <code>notification_data</code> <code>dict</code> <p>Updated notification representation.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Updated notification object.</p> Source code in <code>nukiwebapi/notification.py</code> <pre><code>def update_notification(self, notification_id: str, notification_data: dict) -&gt; dict:\n    \"\"\"Update a notification configuration.\n\n    POST /notification/{notificationId}\n\n    Args:\n        notification_id (str): The unique notification ID.\n        notification_data (dict): Updated notification representation.\n\n    Returns:\n        dict: Updated notification object.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/notification/{notification_id}\", json=notification_data)\n</code></pre> <p>Delete a notification configuration.</p> <p>DELETE /notification/{notificationId}</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The unique notification ID.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/notification.py</code> <pre><code>def delete_notification(self, notification_id: str) -&gt; None:\n    \"\"\"Delete a notification configuration.\n\n    DELETE /notification/{notificationId}\n\n    Args:\n        notification_id (str): The unique notification ID.\n\n    Returns:\n        None\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/notification/{notification_id}\")\n</code></pre>"},{"location":"reference/nukiwebapi/","title":"NukiWebAPI","text":"<p>Fetch all smartlocks and create Smartlock objects mapped by ID.</p> Source code in <code>nukiwebapi/nuki_web_api.py</code> <pre><code>def _fetch_smartlocks(self):\n    \"\"\"Fetch all smartlocks and create Smartlock objects mapped by ID.\"\"\"\n    response = self._request(\"GET\", \"/smartlock\")\n    smartlocks = {}\n    if response.json():\n        for item in response.json():\n            smartlock_id = item.get(\"smartlockId\")\n            if not smartlock_id:\n                continue  # skip invalid entries\n            smartlock = SmartlockInstance(\n                client=self,\n                smartlock_id=smartlock_id,\n                data=item\n            )\n\n            smartlocks[smartlock_id] = smartlock\n\n    return smartlocks\n</code></pre> Source code in <code>nukiwebapi/nuki_web_api.py</code> <pre><code>def _request(self, method: str, endpoint: str, **kwargs):\n    url = f\"{self.base_url}{endpoint}\"\n    headers = kwargs.pop(\"headers\", {})\n    headers[\"Authorization\"] = f\"Bearer {self.access_token}\"\n    headers[\"Accept\"] = \"application/json\"\n\n    response = requests.request(method, url, headers=headers, **kwargs)\n\n    try:\n        response.raise_for_status()\n    except requests.HTTPError as e:\n        # Try to parse detailMessage if present\n        try:\n            error_json = response.json()\n            detail = error_json.get(\"detailMessage\", response.text)\n        except ValueError:\n            detail = response.text\n\n        # Raise a new error with detail included\n        raise requests.HTTPError(\n            f\"{e} | Detail: {detail}\",\n            response=response\n        ) from None\n\n    return response\n</code></pre>"},{"location":"reference/opener/","title":"Opener","text":"<p>Get all intercom brands.</p> <p>GET /opener/brand</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: List of intercom brands with fields: - brandId (int) - brand (str)</p> Source code in <code>nukiwebapi/opener.py</code> <pre><code>def list_brands(self) -&gt; list[dict]:\n    \"\"\"Get all intercom brands.\n\n    GET /opener/brand\n\n    Returns:\n        list[dict]: List of intercom brands with fields:\n            - brandId (int)\n            - brand (str)\n    \"\"\"\n    return self.client._request(\"GET\", \"/opener/brand\")\n</code></pre> <p>Get a specific intercom brand.</p> <p>GET /opener/brand/{brandId}</p> <p>Parameters:</p> Name Type Description Default <code>brand_id</code> <code>int</code> <p>The brand ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Brand object with fields: - brandId (int) - brand (str)</p> Source code in <code>nukiwebapi/opener.py</code> <pre><code>def get_brand(self, brand_id: int) -&gt; dict:\n    \"\"\"Get a specific intercom brand.\n\n    GET /opener/brand/{brandId}\n\n    Args:\n        brand_id (int): The brand ID.\n\n    Returns:\n        dict: Brand object with fields:\n            - brandId (int)\n            - brand (str)\n    \"\"\"\n    return self.client._request(\"GET\", f\"/opener/brand/{brand_id}\")\n</code></pre> <p>Get a list of intercom models.</p> <p>GET /opener/intercom</p> <p>Parameters:</p> Name Type Description Default <code>brand_id</code> <code>int</code> <p>Filter for brandId. Required if recently_changed is not set.</p> <code>None</code> <code>ignore_verified</code> <code>bool</code> <p>If True, return intercoms ignoring their verified value.</p> <code>None</code> <code>recently_changed</code> <code>bool</code> <p>If True, return all intercoms which were recently updated.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: List of intercom objects with fields: - intercomId (int) - brandId (int) - type (int) - model (str) - verified (int) - conGndBus (str) - conBusAudio (str) - conAudioout (str) - conDoorbellPlus (str) - conDoorbellMinus (str) - conOpendoor (str) - conGndAnalogue (str) - busModeSwitch (int) - busModeSwitchShortCircuitDuration (int) - creationDate (str) - updateDate (str)</p> Source code in <code>nukiwebapi/opener.py</code> <pre><code>def list_intercoms(\n    self,\n    brand_id: int | None = None,\n    ignore_verified: bool | None = None,\n    recently_changed: bool | None = None,\n) -&gt; list[dict]:\n    \"\"\"Get a list of intercom models.\n\n    GET /opener/intercom\n\n    Args:\n        brand_id (int, optional): Filter for brandId. Required if recently_changed is not set.\n        ignore_verified (bool, optional): If True, return intercoms ignoring their verified value.\n        recently_changed (bool, optional): If True, return all intercoms which were recently updated.\n\n    Returns:\n        list[dict]: List of intercom objects with fields:\n            - intercomId (int)\n            - brandId (int)\n            - type (int)\n            - model (str)\n            - verified (int)\n            - conGndBus (str)\n            - conBusAudio (str)\n            - conAudioout (str)\n            - conDoorbellPlus (str)\n            - conDoorbellMinus (str)\n            - conOpendoor (str)\n            - conGndAnalogue (str)\n            - busModeSwitch (int)\n            - busModeSwitchShortCircuitDuration (int)\n            - creationDate (str)\n            - updateDate (str)\n    \"\"\"\n    params = {}\n    if brand_id is not None:\n        params[\"brandId\"] = brand_id\n    if ignore_verified is not None:\n        params[\"ignoreVerified\"] = ignore_verified\n    if recently_changed is not None:\n        params[\"recentlyChanged\"] = recently_changed\n    return self.client._request(\"GET\", \"/opener/intercom\", params=params or None)\n</code></pre> <p>Get a specific intercom model.</p> <p>GET /opener/intercom/{intercomId}</p> <p>Parameters:</p> Name Type Description Default <code>intercom_id</code> <code>int</code> <p>The intercom ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Intercom object with fields: - intercomId (int) - brandId (int) - type (int) - model (str) - verified (int) - conGndBus (str) - conBusAudio (str) - conAudioout (str) - conDoorbellPlus (str) - conDoorbellMinus (str) - conOpendoor (str) - conGndAnalogue (str) - busModeSwitch (int) - busModeSwitchShortCircuitDuration (int) - creationDate (str) - updateDate (str)</p> Source code in <code>nukiwebapi/opener.py</code> <pre><code>def get_intercom(self, intercom_id: int) -&gt; dict:\n    \"\"\"Get a specific intercom model.\n\n    GET /opener/intercom/{intercomId}\n\n    Args:\n        intercom_id (int): The intercom ID.\n\n    Returns:\n        dict: Intercom object with fields:\n            - intercomId (int)\n            - brandId (int)\n            - type (int)\n            - model (str)\n            - verified (int)\n            - conGndBus (str)\n            - conBusAudio (str)\n            - conAudioout (str)\n            - conDoorbellPlus (str)\n            - conDoorbellMinus (str)\n            - conOpendoor (str)\n            - conGndAnalogue (str)\n            - busModeSwitch (int)\n            - busModeSwitchShortCircuitDuration (int)\n            - creationDate (str)\n            - updateDate (str)\n    \"\"\"\n    return self.client._request(\"GET\", f\"/opener/intercom/{intercom_id}\")\n</code></pre>"},{"location":"reference/service/","title":"Service","text":"<p>Get a list of services.</p> <p>GET /service</p> <p>Parameters:</p> Name Type Description Default <code>service_ids</code> <code>list[str]</code> <p>Filter for service IDs. Will be joined into a comma-separated string (e.g. [\"airbnb\", \"guesty\"]).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: List of service objects.</p> Source code in <code>nukiwebapi/service.py</code> <pre><code>def list_services(self, service_ids: list[str] | None = None) -&gt; list[dict]:\n    \"\"\"Get a list of services.\n\n    GET /service\n\n    Args:\n        service_ids (list[str], optional): Filter for service IDs. Will be\n            joined into a comma-separated string (e.g. [\"airbnb\", \"guesty\"]).\n\n    Returns:\n        list[dict]: List of service objects.\n    \"\"\"\n    params = {}\n    if service_ids:\n        params[\"serviceIds\"] = \",\".join(service_ids)\n    return self.client._request(\"GET\", \"/service\", params=params or None)\n</code></pre> <p>Get a specific service.</p> <p>GET /service/{serviceId}</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>str</code> <p>The service ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A service object containing fields like: - context (dict) - enabled (bool) - started (bool) - stopped (bool)</p> Source code in <code>nukiwebapi/service.py</code> <pre><code>def get_service(self, service_id: str) -&gt; dict:\n    \"\"\"Get a specific service.\n\n    GET /service/{serviceId}\n\n    Args:\n        service_id (str): The service ID.\n\n    Returns:\n        dict: A service object containing fields like:\n            - context (dict)\n            - enabled (bool)\n            - started (bool)\n            - stopped (bool)\n    \"\"\"\n    return self.client._request(\"GET\", f\"/service/{service_id}\")\n</code></pre> <p>Link a service.</p> <p>POST /service/{serviceId}/link</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>str</code> <p>The service ID.</p> required <code>data</code> <code>dict</code> <p>Payload for linking (may be empty).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A confirmation message from the API.</p> Source code in <code>nukiwebapi/service.py</code> <pre><code>def link_service(self, service_id: str, data: dict | None = None) -&gt; str:\n    \"\"\"Link a service.\n\n    POST /service/{serviceId}/link\n\n    Args:\n        service_id (str): The service ID.\n        data (dict, optional): Payload for linking (may be empty).\n\n    Returns:\n        str: A confirmation message from the API.\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/service/{service_id}/link\", json=data or {}\n    )\n</code></pre> <p>Sync a service.</p> <p>POST /service/{serviceId}/sync</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>str</code> <p>The service ID.</p> required <code>data</code> <code>dict</code> <p>Payload for syncing (may be empty).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>On success, the API returns HTTP 204 (no content).</p> Source code in <code>nukiwebapi/service.py</code> <pre><code>def sync_service(self, service_id: str, data: dict | None = None) -&gt; None:\n    \"\"\"Sync a service.\n\n    POST /service/{serviceId}/sync\n\n    Args:\n        service_id (str): The service ID.\n        data (dict, optional): Payload for syncing (may be empty).\n\n    Returns:\n        None: On success, the API returns HTTP 204 (no content).\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/service/{service_id}/sync\", json=data or {}\n    )\n</code></pre> <p>Unlink a service.</p> <p>POST /service/{serviceId}/unlink</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>str</code> <p>The service ID.</p> required <code>data</code> <code>dict</code> <p>Payload for unlinking (may be empty).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>On success, the API returns HTTP 204 (no content).</p> Source code in <code>nukiwebapi/service.py</code> <pre><code>def unlink_service(self, service_id: str, data: dict | None = None) -&gt; None:\n    \"\"\"Unlink a service.\n\n    POST /service/{serviceId}/unlink\n\n    Args:\n        service_id (str): The service ID.\n        data (dict, optional): Payload for unlinking (may be empty).\n\n    Returns:\n        None: On success, the API returns HTTP 204 (no content).\n    \"\"\"\n    return self.client._request(\n        \"POST\", f\"/service/{service_id}/unlink\", json=data or {}\n    )\n</code></pre>"},{"location":"reference/smartlock/","title":"Smartlock","text":"<p>Get a list of smartlocks.</p> <p>GET /smartlock</p> <p>Parameters:</p> Name Type Description Default <code>auth_id</code> <code>int</code> <p>Filter by authorization ID.</p> <code>None</code> <code>type_</code> <code>int</code> <p>Filter by smartlock type.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>List of smartlocks.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def list_smartlocks(self, auth_id: int | None = None, type_: int | None = None) -&gt; dict[str, Any]:\n    \"\"\"Get a list of smartlocks.\n\n    GET /smartlock\n\n    Args:\n        auth_id (int, optional): Filter by authorization ID.\n        type_ (int, optional): Filter by smartlock type.\n\n    Returns:\n        dict: List of smartlocks.\n    \"\"\"\n    params = {}\n    if auth_id is not None:\n        params[\"authId\"] = auth_id\n    if type_ is not None:\n        params[\"type\"] = type_\n\n    return self.client._request(\"GET\", \"/smartlock\", params=params or None).json()\n</code></pre> <p>Retrieve a smartlock by ID and return a SmartlockInstance wrapper.</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>The ID of the smartlock.</p> required <p>Returns:</p> Name Type Description <code>SmartlockInstance</code> <code>SmartlockInstance</code> <p>An instance with full data and convenience methods.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def get_smartlock(self, smartlock_id: int) -&gt; SmartlockInstance:\n    \"\"\"\n    Retrieve a smartlock by ID and return a SmartlockInstance wrapper.\n\n    Args:\n        smartlock_id (int): The ID of the smartlock.\n\n    Returns:\n        SmartlockInstance: An instance with full data and convenience methods.\n    \"\"\"\n    # Fetch the full smartlock data\n    data = self.client._request(\"GET\", f\"/smartlock/{smartlock_id}\")\n    # Wrap in SmartlockInstance, preserving all API fields\n    return SmartlockInstance(self, smartlock_id, data=data)\n</code></pre> <p>Update a smartlock.</p> <p>POST /smartlock/{smartlockId}</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Update payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_smartlock(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update a smartlock.\n\n    POST /smartlock/{smartlockId}\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Update payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}\", json=data or {})\n</code></pre> <p>Delete a smartlock.</p> <p>DELETE /smartlock/{smartlockId}</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def delete_smartlock(self, smartlock_id: int) -&gt; None:\n    \"\"\"Delete a smartlock.\n\n    DELETE /smartlock/{smartlockId}\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"DELETE\", f\"/smartlock/{smartlock_id}\")\n</code></pre> <p>Perform an action on a smartlock.</p> <p>POST /smartlock/{smartlockId}/action</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Action payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def action(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Perform an action on a smartlock.\n\n    POST /smartlock/{smartlockId}/action\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Action payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/action\", json=data or {})\n</code></pre> <p>Lock a smartlock.</p> <p>POST /smartlock/{smartlockId}/action/lock</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def lock_smartlock(self, smartlock_id: int) -&gt; None:\n    \"\"\"Lock a smartlock.\n\n    POST /smartlock/{smartlockId}/action/lock\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/action/lock\")\n</code></pre> <p>Unlock a smartlock.</p> <p>POST /smartlock/{smartlockId}/action/unlock</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def unlock_smartlock(self, smartlock_id: int) -&gt; None:\n    \"\"\"Unlock a smartlock.\n\n    POST /smartlock/{smartlockId}/action/unlock\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/action/unlock\")\n</code></pre> <p>Update the admin PIN.</p> <p>POST /smartlock/{smartlockId}/admin/pin</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>PIN payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_admin_pin(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update the admin PIN.\n\n    POST /smartlock/{smartlockId}/admin/pin\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): PIN payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/admin/pin\", json=data or {})\n</code></pre> <p>Update advanced smartlock configuration.</p> <p>POST /smartlock/{smartlockId}/advanced/config</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Advanced config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_advanced_config(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update advanced smartlock configuration.\n\n    POST /smartlock/{smartlockId}/advanced/config\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Advanced config.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/advanced/config\", json=data or {})\n</code></pre> <p>Update opener-specific advanced config.</p> <p>POST /smartlock/{smartlockId}/advanced/openerconfig</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock (opener) ID.</p> required <code>data</code> <code>dict</code> <p>Opener config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_opener_advanced_config(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update opener-specific advanced config.\n\n    POST /smartlock/{smartlockId}/advanced/openerconfig\n\n    Args:\n        smartlock_id (int): Smartlock (opener) ID.\n        data (dict, optional): Opener config.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/advanced/openerconfig\", json=data or {})\n</code></pre> <p>Update smartdoor-specific advanced config.</p> <p>POST /smartlock/{smartlockId}/advanced/smartdoorconfig</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartdoor ID.</p> required <code>data</code> <code>dict</code> <p>Smartdoor config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_smartdoor_advanced_config(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update smartdoor-specific advanced config.\n\n    POST /smartlock/{smartlockId}/advanced/smartdoorconfig\n\n    Args:\n        smartlock_id (int): Smartdoor ID.\n        data (dict, optional): Smartdoor config.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/advanced/smartdoorconfig\", json=data or {})\n</code></pre> <p>Update general smartlock config.</p> <p>POST /smartlock/{smartlockId}/config</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Config payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_config(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update general smartlock config.\n\n    POST /smartlock/{smartlockId}/config\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Config payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/config\", json=data or {})\n</code></pre> <p>Sync smartlock state.</p> <p>POST /smartlock/{smartlockId}/sync</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Sync payload.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def sync_smartlock(self, smartlock_id: int) -&gt; None:\n    \"\"\"Sync smartlock state.\n\n    POST /smartlock/{smartlockId}/sync\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Sync payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/sync\")\n</code></pre> <p>Apply bulk web configuration to smartlocks.</p> <p>POST /bulk-web-config</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Bulk config payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def bulk_web_config(self, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Apply bulk web configuration to smartlocks.\n\n    POST /bulk-web-config\n\n    Args:\n        data (dict, optional): Bulk config payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", \"/bulk-web-config\", json=data or {})\n</code></pre> <p>Update web config for a smartlock.</p> <p>POST /smartlock/{smartlockId}/web/config</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>Smartlock ID.</p> required <code>data</code> <code>dict</code> <p>Web config payload.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Empty response on success.</p> Source code in <code>nukiwebapi/smartlock.py</code> <pre><code>def update_web_config(self, smartlock_id: int, data: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Update web config for a smartlock.\n\n    POST /smartlock/{smartlockId}/web/config\n\n    Args:\n        smartlock_id (int): Smartlock ID.\n        data (dict, optional): Web config payload.\n\n    Returns:\n        None: Empty response on success.\n    \"\"\"\n    return self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/web/config\", json=data or {})\n</code></pre>"},{"location":"reference/smartlockauth/","title":"SmartlockAuth","text":"<p>Get all smartlock authorizations for the account.</p> <p>GET /smartlock/auth</p> <p>Parameters:</p> Name Type Description Default <code>account_user_id</code> <code>int</code> <p>Filter by account user ID.</p> <code>None</code> <code>types</code> <code>str</code> <p>Comma-separated authorization types, e.g., '0,2,3'.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>list[dict]: List of SmartlockAuth objects.</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def list_auths(self, account_user_id: Optional[int] = None, types: Optional[str] = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"Get all smartlock authorizations for the account.\n\n    GET /smartlock/auth\n\n    Args:\n        account_user_id (int, optional): Filter by account user ID.\n        types (str, optional): Comma-separated authorization types, e.g., '0,2,3'.\n\n    Returns:\n        list[dict]: List of SmartlockAuth objects.\n    \"\"\"\n    params = {}\n    if account_user_id is not None:\n        params[\"accountUserId\"] = account_user_id\n    if types is not None:\n        params[\"types\"] = types\n    return self.client._request(\"GET\", \"/smartlock/auth\", params=params).json()\n</code></pre> <p>Create asynchronous authorizations for multiple smartlocks.</p> <p>PUT /smartlock/auth</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def create_auth_for_smartlocks(\n    self,\n    name: str,\n    smartlock_ids: List[int],\n    remote_allowed: bool,\n    allowed_from_date: Optional[str] = None,\n    allowed_until_date: Optional[str] = None,\n    allowed_week_days: Optional[int] = None,\n    allowed_from_time: Optional[int] = None,\n    allowed_until_time: Optional[int] = None,\n    account_user_id: Optional[int] = None,\n    smart_actions_enabled: Optional[bool] = None,\n    type: Optional[int] = 0,\n    code: Optional[int] = None,\n) -&gt; None:\n    \"\"\"Create asynchronous authorizations for multiple smartlocks.\n\n    PUT /smartlock/auth\n\n    Returns:\n        None\n    \"\"\"\n    payload = {\n        \"name\": name,\n        \"smartlockIds\": smartlock_ids,\n        \"remoteAllowed\": remote_allowed,\n        \"type\": type,\n    }\n    if allowed_from_date is not None:\n        payload[\"allowedFromDate\"] = allowed_from_date\n    if allowed_until_date is not None:\n        payload[\"allowedUntilDate\"] = allowed_until_date\n    if allowed_week_days is not None:\n        payload[\"allowedWeekDays\"] = allowed_week_days\n    if allowed_from_time is not None:\n        payload[\"allowedFromTime\"] = allowed_from_time\n    if allowed_until_time is not None:\n        payload[\"allowedUntilTime\"] = allowed_until_time\n    if account_user_id is not None:\n        payload[\"accountUserId\"] = account_user_id\n    if smart_actions_enabled is not None:\n        payload[\"smartActionsEnabled\"] = smart_actions_enabled\n    if code is not None:\n        payload[\"code\"] = code\n\n    self.client._request(\"PUT\", \"/smartlock/auth\", json=payload)\n</code></pre> <p>Update multiple authorizations asynchronously (POST /smartlock/auth).</p> <p>Parameters:</p> Name Type Description Default <code>auth_list</code> <code>list[dict]</code> <p>List of authorization update payloads.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def update_auths_bulk(self, auth_list: List[Dict[str, Any]]) -&gt; None:\n    \"\"\"Update multiple authorizations asynchronously (POST /smartlock/auth).\n\n    Args:\n        auth_list (list[dict]): List of authorization update payloads.\n\n    Returns:\n        None\n    \"\"\"\n    self.client._request(\"POST\", \"/smartlock/auth\", json=auth_list)\n</code></pre> <p>Delete one or multiple authorizations.</p> <p>DELETE /smartlock/auth</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>List of authorization IDs to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def delete_auths(self, ids: List[str]) -&gt; None:\n    \"\"\"Delete one or multiple authorizations.\n\n    DELETE /smartlock/auth\n\n    Args:\n        ids (list[str]): List of authorization IDs to delete.\n\n    Returns:\n        None\n    \"\"\"\n    self.client._request(\"DELETE\", \"/smartlock/auth\", json=ids)\n</code></pre> <p>Get authorizations for a specific smartlock.</p> <p>GET /smartlock/{smartlockId}/auth</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>list[dict]: List of SmartlockAuth objects for the smartlock.</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def list_auths_for_smartlock(self, smartlock_id: int, types: Optional[str] = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"Get authorizations for a specific smartlock.\n\n    GET /smartlock/{smartlockId}/auth\n\n    Returns:\n        list[dict]: List of SmartlockAuth objects for the smartlock.\n    \"\"\"\n    params = {\"types\": types} if types else None\n    return self.client._request(\"GET\", f\"/smartlock/{smartlock_id}/auth\", params=params).json()\n</code></pre> <p>Create authorization for a single smartlock.</p> <p>PUT /smartlock/{smartlockId}/auth</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def create_auth_for_smartlock(\n    self,\n    smartlock_id: int,\n    name: str,\n    remote_allowed: bool,\n    allowed_from_date: Optional[str] = None,\n    allowed_until_date: Optional[str] = None,\n    allowed_week_days: Optional[int] = None,\n    allowed_from_time: Optional[int] = None,\n    allowed_until_time: Optional[int] = None,\n    account_user_id: Optional[int] = None,\n    smart_actions_enabled: Optional[bool] = None,\n    type: Optional[int] = 0,\n    code: Optional[int] = None,\n) -&gt; None:\n    \"\"\"Create authorization for a single smartlock.\n\n    PUT /smartlock/{smartlockId}/auth\n\n    Returns:\n        None\n    \"\"\"\n    payload = {\n        \"name\": name,\n        \"remoteAllowed\": remote_allowed,\n        \"type\": type,\n    }\n    if allowed_from_date is not None:\n        payload[\"allowedFromDate\"] = allowed_from_date\n    if allowed_until_date is not None:\n        payload[\"allowedUntilDate\"] = allowed_until_date\n    if allowed_week_days is not None:\n        payload[\"allowedWeekDays\"] = allowed_week_days\n    if allowed_from_time is not None:\n        payload[\"allowedFromTime\"] = allowed_from_time\n    if allowed_until_time is not None:\n        payload[\"allowedUntilTime\"] = allowed_until_time\n    if account_user_id is not None:\n        payload[\"accountUserId\"] = account_user_id\n    if smart_actions_enabled is not None:\n        payload[\"smartActionsEnabled\"] = smart_actions_enabled\n    if code is not None:\n        payload[\"code\"] = code\n\n    self.client._request(\"PUT\", f\"/smartlock/{smartlock_id}/auth\", json=payload)\n</code></pre> <p>Get a single authorization.</p> <p>GET /smartlock/{smartlockId}/auth/{id}</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>SmartlockAuth object.</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def get_auth(self, smartlock_id: int, auth_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get a single authorization.\n\n    GET /smartlock/{smartlockId}/auth/{id}\n\n    Returns:\n        dict: SmartlockAuth object.\n    \"\"\"\n    return self.client._request(\"GET\", f\"/smartlock/{smartlock_id}/auth/{auth_id}\")\n</code></pre> <p>Update a single authorization asynchronously.</p> <p>POST /smartlock/{smartlockId}/auth/{id}</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def update_auth(\n    self,\n    smartlock_id: int,\n    auth_id: str,\n    name: Optional[str] = None,\n    allowed_from_date: Optional[str] = None,\n    allowed_until_date: Optional[str] = None,\n    allowed_week_days: Optional[int] = None,\n    allowed_from_time: Optional[int] = None,\n    allowed_until_time: Optional[int] = None,\n    account_user_id: Optional[int] = None,\n    enabled: Optional[bool] = None,\n    remote_allowed: Optional[bool] = None,\n    code: Optional[int] = None,\n) -&gt; None:\n    \"\"\"Update a single authorization asynchronously.\n\n    POST /smartlock/{smartlockId}/auth/{id}\n\n    Returns:\n        None\n    \"\"\"\n    payload = {}\n    if name is not None:\n        payload[\"name\"] = name\n    if allowed_from_date is not None:\n        payload[\"allowedFromDate\"] = allowed_from_date\n    if allowed_until_date is not None:\n        payload[\"allowedUntilDate\"] = allowed_until_date\n    if allowed_week_days is not None:\n        payload[\"allowedWeekDays\"] = allowed_week_days\n    if allowed_from_time is not None:\n        payload[\"allowedFromTime\"] = allowed_from_time\n    if allowed_until_time is not None:\n        payload[\"allowedUntilTime\"] = allowed_until_time\n    if account_user_id is not None:\n        payload[\"accountUserId\"] = account_user_id\n    if enabled is not None:\n        payload[\"enabled\"] = enabled\n    if remote_allowed is not None:\n        payload[\"remoteAllowed\"] = remote_allowed\n    if code is not None:\n        payload[\"code\"] = code\n\n    self.client._request(\"POST\", f\"/smartlock/{smartlock_id}/auth/{auth_id}\", json=payload)\n</code></pre> <p>Delete a single authorization.</p> <p>DELETE /smartlock/{smartlockId}/auth/{id}</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def delete_auth(self, smartlock_id: int, auth_id: str) -&gt; None:\n    \"\"\"Delete a single authorization.\n\n    DELETE /smartlock/{smartlockId}/auth/{id}\n\n    Returns:\n        None\n    \"\"\"\n    self.client._request(\"DELETE\", f\"/smartlock/{smartlock_id}/auth/{auth_id}\")\n</code></pre> <p>Generate a shared key authorization.</p> <p>POST /smartlock/{smartlockId}/auth/advanced/sharedkey</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def generate_shared_key_auth(\n    self,\n    smartlock_id: int,\n    name: str,\n    allowed_from_date: Optional[str] = None,\n    allowed_until_date: Optional[str] = None,\n    allowed_week_days: Optional[int] = None,\n    allowed_from_time: Optional[int] = None,\n    allowed_until_time: Optional[int] = None,\n    account_user_id: Optional[int] = None,\n) -&gt; None:\n    \"\"\"Generate a shared key authorization.\n\n    POST /smartlock/{smartlockId}/auth/advanced/sharedkey\n\n    Returns:\n        None\n    \"\"\"\n    payload = {\"name\": name}\n    if allowed_from_date is not None:\n        payload[\"allowedFromDate\"] = allowed_from_date\n    if allowed_until_date is not None:\n        payload[\"allowedUntilDate\"] = allowed_until_date\n    if allowed_week_days is not None:\n        payload[\"allowedWeekDays\"] = allowed_week_days\n    if allowed_from_time is not None:\n        payload[\"allowedFromTime\"] = allowed_from_time\n    if allowed_until_time is not None:\n        payload[\"allowedUntilTime\"] = allowed_until_time\n    if account_user_id is not None:\n        payload[\"accountUserId\"] = account_user_id\n\n    self.client._request(\n        \"POST\",\n        f\"/smartlock/{smartlock_id}/auth/advanced/sharedkey\",\n        json=payload,\n    )\n</code></pre> <p>Get a paginated list of authorizations.</p> <p>GET /smartlock/auth/paged</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>Pagination response with results.</p> Source code in <code>nukiwebapi/smartlock_auth.py</code> <pre><code>def list_auths_paged(\n    self,\n    page: int = 0,\n    size: int = 100,\n    account_user_id: Optional[int] = None,\n    types: Optional[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Get a paginated list of authorizations.\n\n    GET /smartlock/auth/paged\n\n    Returns:\n        dict: Pagination response with results.\n    \"\"\"\n    params = {\"page\": page, \"size\": size}\n    if account_user_id is not None:\n        params[\"accountUserId\"] = account_user_id\n    if types is not None:\n        params[\"types\"] = types\n\n    return self.client._request(\"GET\", \"/smartlock/auth/paged\", params=params)\n</code></pre>"},{"location":"reference/smartlockinstance/","title":"SmartlockInstance","text":"<p>Return the full last known API data for this smartlock.</p> <p>Return the smartlock name from config if available.</p> <p>Return the full state dictionary if available.</p> <p>Return the remaining battery percentage, if known.</p> <p>True if the smartlock state indicates it is locked.</p> <p>Fetch the latest data for this smartlock.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>The latest smartlock state object from the API.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def refresh(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Fetch the latest data for this smartlock.\n\n    Returns:\n        dict: The latest smartlock state object from the API.\n    \"\"\"\n    self._data = self.client._request(\"GET\", f\"/smartlock/{self.id}\")\n    return self._data\n</code></pre> <p>Send an action command to the smartlock.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>int</code> <p>Action code (1=unlock, 2=lock, 3=unlatch, 4=lock\u2019n\u2019go, 5=lock\u2019n\u2019go+unlatch).</p> required <code>option</code> <code>int</code> <p>Option mask (2=force, 4=full lock).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def _action(self, action: int, option: Optional[int] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Send an action command to the smartlock.\n\n    Args:\n        action (int): Action code (1=unlock, 2=lock, 3=unlatch, 4=lock\u2019n\u2019go, 5=lock\u2019n\u2019go+unlatch).\n        option (int, optional): Option mask (2=force, 4=full lock).\n\n    Returns:\n        dict: API response.\n    \"\"\"\n    payload: Dict[str, Any] = {\"action\": action}\n    if option is not None:\n        payload[\"option\"] = option\n\n    response = self.client._request(\n        \"POST\", f\"/smartlock/{self.id}/action\", json=payload\n    )\n    self.refresh()\n    return response\n</code></pre> <p>Lock the smartlock.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>If True, use force option (option=2).</p> <code>False</code> <code>full</code> <code>bool</code> <p>If True, request a full lock (option=4).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def lock(self, force: bool = False, full: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"\n    Lock the smartlock.\n\n    Args:\n        force (bool): If True, use force option (option=2).\n        full (bool): If True, request a full lock (option=4).\n\n    Returns:\n        dict: API response.\n    \"\"\"\n    option = 2 if force else 4 if full else None\n    return self._action(2, option=option)\n</code></pre> <p>Unlock the smartlock.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>If True, use force option (option=2).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def unlock(self, force: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"\n    Unlock the smartlock.\n\n    Args:\n        force (bool): If True, use force option (option=2).\n\n    Returns:\n        dict: API response.\n    \"\"\"\n    option = 2 if force else None\n    return self._action(1, option=option)\n</code></pre> <p>Unlatch the smartlock.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def unlatch(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Unlatch the smartlock.\n\n    Returns:\n        dict: API response.\n    \"\"\"\n    return self._action(3)\n</code></pre> <p>Perform lock \u2019n\u2019 go.</p> <p>Parameters:</p> Name Type Description Default <code>unlatch</code> <code>bool</code> <p>If True, perform lock \u2019n\u2019 go with unlatch (action=5).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>API response.</p> Source code in <code>nukiwebapi/smartlock_instance.py</code> <pre><code>def lock_and_go(self, unlatch: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"\n    Perform lock \u2019n\u2019 go.\n\n    Args:\n        unlatch (bool): If True, perform lock \u2019n\u2019 go with unlatch (action=5).\n\n    Returns:\n        dict: API response.\n    \"\"\"\n    return self._action(5 if unlatch else 4)\n</code></pre>"},{"location":"reference/smartlocklog/","title":"SmartlockLog","text":"<p>Get a list of smartlock logs for all smartlocks in the account.</p> <p>GET /smartlock/log</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>Query filters such as: - accountUserId (int): Filter by account user ID. - fromDate (str): Start date (RFC3339). - toDate (str): End date (RFC3339). - action (int): Filter by action code. - id (str): Return logs older than this ID. - limit (int): Max number of logs (default: 20, max: 50).</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>list[dict]: List of smartlock log entries.</p> Source code in <code>nukiwebapi/smartlock_log.py</code> <pre><code>def list_logs(self, params: Optional[Dict[str, Any]] = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of smartlock logs for all smartlocks in the account.\n\n    GET /smartlock/log\n\n    Args:\n        params (dict, optional): Query filters such as:\n            - accountUserId (int): Filter by account user ID.\n            - fromDate (str): Start date (RFC3339).\n            - toDate (str): End date (RFC3339).\n            - action (int): Filter by action code.\n            - id (str): Return logs older than this ID.\n            - limit (int): Max number of logs (default: 20, max: 50).\n\n    Returns:\n        list[dict]: List of smartlock log entries.\n    \"\"\"\n    return self.client._request(\"GET\", \"/smartlock/log\", params=params)\n</code></pre> <p>Get a list of smartlock logs for a specific smartlock.</p> <p>GET /smartlock/{smartlockId}/log</p> <p>Parameters:</p> Name Type Description Default <code>smartlock_id</code> <code>int</code> <p>The smartlock ID.</p> required <code>params</code> <code>dict</code> <p>Query filters such as: - authId (str): Filter by authorization ID. - accountUserId (int): Filter by account user ID. - fromDate (str): Start date (RFC3339). - toDate (str): End date (RFC3339). - action (int): Filter by action code. - id (str): Return logs older than this ID. - limit (int): Max number of logs (default: 20, max: 50).</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>list[dict]: List of smartlock log entries.</p> Source code in <code>nukiwebapi/smartlock_log.py</code> <pre><code>def list_logs_for_smartlock(\n    self, smartlock_id: int, params: Optional[Dict[str, Any]] = None\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of smartlock logs for a specific smartlock.\n\n    GET /smartlock/{smartlockId}/log\n\n    Args:\n        smartlock_id (int): The smartlock ID.\n        params (dict, optional): Query filters such as:\n            - authId (str): Filter by authorization ID.\n            - accountUserId (int): Filter by account user ID.\n            - fromDate (str): Start date (RFC3339).\n            - toDate (str): End date (RFC3339).\n            - action (int): Filter by action code.\n            - id (str): Return logs older than this ID.\n            - limit (int): Max number of logs (default: 20, max: 50).\n\n    Returns:\n        list[dict]: List of smartlock log entries.\n    \"\"\"\n    return self.client._request(\n        \"GET\", f\"/smartlock/{smartlock_id}/log\", params=params\n    )\n</code></pre>"}]}